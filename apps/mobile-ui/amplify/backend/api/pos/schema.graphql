type Brand @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  description: String
}

type Category @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  description: String
  code: String
  color: String
  picture: String
}

type Customer @model @auth(rules: [{allow: public}]) {
  id: ID!
  firstName: String!
  lastName: String
  middleName: String
  dob: AWSDate
  phone: String
  email: String
}

type Order @model @auth(rules: [{allow: public}]) {
  id: ID!
  subtotal: Float!
  tax: Float!
  total: Float!
  status: OrderStatus!
  employeeId: String!
  employeeName: String!
  OrderItems: [OrderLine] @hasMany(indexName: "byOrder", fields: ["id"])
  Customer: Customer @hasOne
}

type OrderLine @model @auth(rules: [{allow: public}]) {
  id: ID!
  productId: String!
  barcode: String
  sku: String
  productName: String!
  unitOfMeasure: String!
  quantity: Float!
  tax: Float!
  price: Float!
  discountType: String
  discountValue: Float
  orderID: ID! @index(name: "byOrder")
}

enum OrderStatus {
  OPEN
  CANCELLED
  PAID
  ONHOLD
}

type Product @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  description: String
  price: Float!
  tags: String
  cost: Float
  barcode: String
  sku: String
  quantity: Float!
  unitOfMeasure: String!
  trackStock: Boolean! 
  picture: String
  Category: Category @hasOne
  Brand: Brand @hasOne
  isActive: Boolean
}

type PurchaseOrder @model @auth(rules: [{allow: public}]) {
  id: ID!
  Supplier: Supplier @hasOne
  purchaseDate: AWSDateTime
  amount: Float
}

type PurchaseOrderLine @model @auth(rules: [{allow: public}]) {
  id: ID!
  Product: Product @hasOne
  unitPrice: Float
  quantity: Float
}

type Store @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  address: String!
  city: String!
  state: String!
  zipCode: String!
  country: String!
  phone: String!
  fax: String
  email: String!
  disclaimer: String
}

type Supplier @model @auth(rules: [{allow: public}]) {
  id: ID!
  code: String
  name: String!
}

type Stock @model @auth(rules: [{allow: public}]) {
  id: ID!
  Product: Product @hasOne
  quantity: Float!
  updatedAt: AWSDateTime
}

type Tag @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
}

type UnitOfMeasure @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  description: String
}

type Inventory @model @auth(rules: [{allow: public}]) {
    id: ID!
    quantity: Float!
    Product: Product @hasOne
}

type InventoryChanges @model @auth(rules: [{allow: public}]) {
    id: ID!
    timestamp: AWSDateTime!
    type: String! # type of operation Purchase Order/Inventory count
    typeId: String # identifier to that type
    quantityIn: Int!
    quantityOut: Int!
    Product: Product @hasOne
}

enum InventoryCountStatus {
  IN_PROGRESS
  COMPLETED
}

type InventoryCount @model @auth(rules: [{allow: public}]) {
    id: ID!
    comments: String
    status: InventoryCountStatus!
}

type InventoryCountLine @model @auth(rules: [{allow: public}]) {
    id: ID!
    productId: String!
    productName: String!
    unitOfMeasure: String!
    current: Float!
    newCount: Float!
    comments: String
    InventoryCount: InventoryCount @hasOne
}

enum InventoryReceiveStatus {
  IN_PROGRESS
  COMPLETED
}

type InventoryReceive @model @auth(rules: [{allow: public}]) {
    id: ID!
    comments: String   
    status: InventoryReceiveStatus! 
}

type InventoryReceiveLine @model @auth(rules: [{allow: public}]) {
    id: ID!
    productId: String!
    productName: String!
    unitOfMeasure: String!
    received: Float!
    comments: String
    InventoryReceive: InventoryReceive @hasOne
}

type Printer @model @auth(rules: [{allow: public}]) {
    id: ID!
    deviceId: String!
    identifier: String!
    interfaceType: String!
    ip: String!
    model: String
    alias: String
}

type Station @model @auth(rules: [{allow: public}]) {
    id: ID!
    deviceId: String!
    alias: String!
}
